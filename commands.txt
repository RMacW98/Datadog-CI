mkdir movies
- https://learn.hashicorp.com/tutorials/vagrant/getting-started-index?in=vagrant/getting-started
cd movies
vagrant init hashicorp/bionic64
vagrant up
vagrant ssh
cd /vagrant
- Download movies directory (https://drive.google.com/drive/folders/1sqXJlF_quexBwCA4OneJR0fm0Q-knk2z?q=movies)
- move **THE CONTENTS*** of movies (not the directory itself) to your /Documents/vagrant/movies folder
******GET ALL THE NECESSARY PACKAGES FOR APP**********
- install pip https://linuxize.com/post/how-to-install-pip-on-ubuntu-18.04/
sudo apt update
sudo apt install python3-pip
pip3 --version
pip3 install --upgrade pip
pip3 install -r requirements.txt
python3 main.py
********CONFIGURE PORT FORWARDING *************
- https://learn.hashicorp.com/tutorials/vagrant/getting-started-networking?in=vagrant/getting-started
vi Vagrantfile
config.vm.provision :shell, path: “bootstrap.sh”
config.vm.network :forwarded_port, guest: 5050, host: 5050
:wq!
exit
vagrant reload
vagrant up
vagrant ssh
python3 main.py
- will see it on localhost:5050 (or whatever port you have assigned) OR 0.0.0.0:5050
**********GETTING APM RUNNING WITH DATADOG***************
https://docs.datadoghq.com/tracing/setup_overview/setup/python/?tab=containers
pip3 install ddtrace
**********INSTALL DATADOG***************
- install datadog on your ubuntu machine using 1-step easy install command
********RUN***********
cd /vagrant
DD_SERVICE=“apm_flask” DD_ENV=“dev” DD_LOGS_INJECTION=true DD_PROFILING_ENABLED=true ddtrace-run python3 main.py

****Postgres******
Enter 
sudo -iu postgres psql
CREATE DATABASE movies;
ALTER USER postgres PASSWORD 'postgres';

\c movies
CREATE EXTENSION pg_stat_statements;

***For Explain Plans***
CREATE SCHEMA IF NOT EXISTS datadog;

CREATE OR REPLACE FUNCTION datadog.explain_statement(   l_query TEXT,
   OUT explain JSON
)
RETURNS SETOF JSON AS
$$
DECLARE
curs REFCURSOR;
plan JSON;

BEGIN
   OPEN curs FOR EXECUTE pg_catalog.concat('EXPLAIN (FORMAT JSON) ', l_query);
   FETCH curs INTO plan;
   CLOSE curs;
   RETURN QUERY SELECT plan;
END;
$$
LANGUAGE 'plpgsql'
RETURNS NULL ON NULL INPUT
SECURITY DEFINER;

